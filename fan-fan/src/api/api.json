
1. Регистрация пока без отправки на почту подтверждающего кода на домен @dvfu.ru
2. У каждого пользователя есть интересы, он их выставляет при регистрации или в редактировании профиля (например, футбол, теннис, программирование и т.д.)
3. Пользователь может создавать объявления, они трех типов:
	3.1 Объявление "Meeting (встреча)": это временные объявления в стиле: "У меня обеденный перерыв хочу пообщаться буду в А корпусе на 11 уровне"
	3.2 Объявления "Event (мероприятие)": это мероприятия
	3.3 Объявления "Find (ищу то-то)": примеры: "Ищу друзей, чтобы гулять", "Ищу соседа"
Каждое объявление имеет дату действия: с.. по.. .После этой даты объявления становятся недействительными и не выводятся пользователям.
Также есть тип объявления: с чатом и без:
	- при объявлении с чатом, для тех, кто откликнулся, они добавляются в чат, в котором могут общаться, пока объявление действительно
	- при объявлении без чата, хозяин объявления просто может посмотреть пользователей, которые откликнулись, кол-во откликнувшихся
Также есть поле с ограничением на кол-во возможных откликов на объявление
4. Система чатов: каждый интерес, а также объявление, если оно "с чатом", имеют свой чат с сообщениями и пользователями.
То есть, когда пользователь добавляет себе интерес, то он добавляется в чат этого интереса. А также когда откликается на объявление, добавляется в чат объявления.

//5. Позже дореализуем знакомства как в тиндере, рандомные знакомства 1 на 1 и еще функций.

API
/register
	POST: зарегистрировать пользователя
		{
			//Данные пользователя
			login, password, name, tg
		}
/auth/me
	GET: проверка на сервере, авторизован ли пользователь
		Ответ:
		{
			//ответ авторизован или нет
			resultCode: [0 - авторизован, 1 - неавторизован],
			//в случае, ели авторизован, возврат id пользователя и его логин
			data: {
				user_id,
				login
			}
		}
/login
	POST: вход
		{
			//данные пользователя
			email,
			password
		}
		Ответ:
		{
			//ответ, верны ли данные
			resultCode: [0 - верно, 1 - неверно]
			message: //ошибка
		}
/profile/{user_id}
	POST: изменение данных о пользователе
		{
			name,
			tg,
			desc,
			img,
			interests: [id1,id2]
		}
	//При отправке post запроса: у пользователя поменять данные, а также привязать ему интересы, и отвязать старые (users_interests)
	GET: получить данные о пользователе
		response
		{
			id,
			name,
			tg,
			desc,
			img,
			interests: [{id, name}, {id, name}],
			posts: [{id, owner_of_post:{name, login}, type, name, desc, place, datetime_from, datetime_to, countPeople, withChat, chatId}, {}, {}]
		}
	//Для страницы пользователя получить все данные о нем, его интересах и его постах, которые он создавал, и которые еще активны (не на которые он откликнулся)
/interests
	GET: получить все интересы
	{
		[{id, name}, {id, name}] //массив интересов
	}
	//Все существующие интересы
/newpost
	POST: пользователь создает пост
	{
		type, (0 - meeting, 1 - event, 2 - find),
		name,
		desc, //описание поста
		place, //место встречи str
		datetime_from, ‘dd mm yyyy hh mm’
		datetime_to,
		//created_at,
		hasChat (false, true), //создавать ли чат для поста
		maxPeople //Ограничение на кол-во int
	}
	//Сохранить в бд пост, связать его с хозяином (user_id)
	//Если has_chat = true, то создать новый чат, связать с постом (chat_id)
/posts
    GET: получить посты
        Query params:
            type: int //тип постов (null,0,1,2)
			page: int //секция постов (по 10 постов)
	response
	{
		[{
		id,
		name,
		desc,
		place,
		datetime_from,
		datetime_to,
		created_at,
		create_chat (false, true),
		maxPeople,
		countPeople,
		}, {}, {}]
	}
	//Получить действующие посты по типу (0,1,2) для пользователя. Вернуть только посты, где user не хозяин и еще не откликнулся
/follow/{post_id}
	POST: откликнуться на пост (добавиться в чат)
	response
	{
		resultCode: 0 //успешно
	} 
	//Добавить пользователя в список откликнувшихся на пост

/chats
	GET: чаты пользователя (в которых он состоит) (это чаты постов, на которые он откликнулся или которыми он владеет, и чаты его интересов)
		{
			[{id,
			name //название поста или интереса, которому принадлежит чат
			}, {}, {}]
        }
	//По user_id найти интересы и посты пользователя (где он создатель), а также посты, на которые он откликнулся, взять их чаты
	//Вернуть id чата и название интереса либо поста этого чата
/chats/{chat_id}
	GET: данные о чате
	{
		//данные о посте или интересу
	}
	//Взять по chat_id пост или интерес по типу чата (смотря чему принадлежит чат), проверить, имеет ли доступ
	//пользователь к чату (проверить откликнулся ли он на пост или является ли хозяином или есть ли у него интерес)
	//Вернуть имя поста или интереса, 

//По каналу веб сокета надо будет поэкспериментировать
Обмен сообщениями

Сервер отправляет:
messages - отправлять сообщения в виде массива сообщений с id чатов
{
	[
		{
			"chatId"
			"messageId"
			"text"
			"senderId"
			"date"
		},
		{},{},{}
	]
}

Отправляется на сервер
message - новое сообщение
{
	chatId,
	messageId,
	text,
	senderId,
	data
}

message_has_read - запрос на то, что сообщение прочитано
{
	message_id,
	user_id - кто прочитал
}